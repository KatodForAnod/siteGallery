// Code generated by MockGen. DO NOT EDIT.
// Source: db_interface.go

// Package mock_db is a generated GoMock package.
package controller

import (
	models "KatodForAnod/siteGallery/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// AddImage mocks base method.
func (m *MockDatabase) AddImage(data models.ImgMetaData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddImage", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddImage indicates an expected call of AddImage.
func (mr *MockDatabaseMockRecorder) AddImage(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddImage", reflect.TypeOf((*MockDatabase)(nil).AddImage), data)
}

// AddUser mocks base method.
func (m *MockDatabase) AddUser(user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockDatabaseMockRecorder) AddUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockDatabase)(nil).AddUser), user)
}

// GetImage mocks base method.
func (m *MockDatabase) GetImage(id int64) (models.ImgMetaData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", id)
	ret0, _ := ret[0].(models.ImgMetaData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockDatabaseMockRecorder) GetImage(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockDatabase)(nil).GetImage), id)
}

// GetImages mocks base method.
func (m *MockDatabase) GetImages(offSet, limit int64) ([]models.ImgMetaData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImages", offSet, limit)
	ret0, _ := ret[0].([]models.ImgMetaData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImages indicates an expected call of GetImages.
func (mr *MockDatabaseMockRecorder) GetImages(offSet, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImages", reflect.TypeOf((*MockDatabase)(nil).GetImages), offSet, limit)
}

// GetUser mocks base method.
func (m *MockDatabase) GetUser(email string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", email)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockDatabaseMockRecorder) GetUser(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDatabase)(nil).GetUser), email)
}

// RemoveImage mocks base method.
func (m *MockDatabase) RemoveImage(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveImage", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveImage indicates an expected call of RemoveImage.
func (mr *MockDatabaseMockRecorder) RemoveImage(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveImage", reflect.TypeOf((*MockDatabase)(nil).RemoveImage), id)
}

// MockDatabaseImg is a mock of DatabaseImg interface.
type MockDatabaseImg struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseImgMockRecorder
}

// MockDatabaseImgMockRecorder is the mock recorder for MockDatabaseImg.
type MockDatabaseImgMockRecorder struct {
	mock *MockDatabaseImg
}

// NewMockDatabaseImg creates a new mock instance.
func NewMockDatabaseImg(ctrl *gomock.Controller) *MockDatabaseImg {
	mock := &MockDatabaseImg{ctrl: ctrl}
	mock.recorder = &MockDatabaseImgMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseImg) EXPECT() *MockDatabaseImgMockRecorder {
	return m.recorder
}

// AddImage mocks base method.
func (m *MockDatabaseImg) AddImage(data models.ImgMetaData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddImage", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddImage indicates an expected call of AddImage.
func (mr *MockDatabaseImgMockRecorder) AddImage(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddImage", reflect.TypeOf((*MockDatabaseImg)(nil).AddImage), data)
}

// GetImage mocks base method.
func (m *MockDatabaseImg) GetImage(id int64) (models.ImgMetaData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", id)
	ret0, _ := ret[0].(models.ImgMetaData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockDatabaseImgMockRecorder) GetImage(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockDatabaseImg)(nil).GetImage), id)
}

// GetImages mocks base method.
func (m *MockDatabaseImg) GetImages(offSet, limit int64) ([]models.ImgMetaData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImages", offSet, limit)
	ret0, _ := ret[0].([]models.ImgMetaData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImages indicates an expected call of GetImages.
func (mr *MockDatabaseImgMockRecorder) GetImages(offSet, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImages", reflect.TypeOf((*MockDatabaseImg)(nil).GetImages), offSet, limit)
}

// RemoveImage mocks base method.
func (m *MockDatabaseImg) RemoveImage(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveImage", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveImage indicates an expected call of RemoveImage.
func (mr *MockDatabaseImgMockRecorder) RemoveImage(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveImage", reflect.TypeOf((*MockDatabaseImg)(nil).RemoveImage), id)
}

// MockDatabaseUser is a mock of DatabaseUser interface.
type MockDatabaseUser struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseUserMockRecorder
}

// MockDatabaseUserMockRecorder is the mock recorder for MockDatabaseUser.
type MockDatabaseUserMockRecorder struct {
	mock *MockDatabaseUser
}

// NewMockDatabaseUser creates a new mock instance.
func NewMockDatabaseUser(ctrl *gomock.Controller) *MockDatabaseUser {
	mock := &MockDatabaseUser{ctrl: ctrl}
	mock.recorder = &MockDatabaseUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseUser) EXPECT() *MockDatabaseUserMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockDatabaseUser) AddUser(user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockDatabaseUserMockRecorder) AddUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockDatabaseUser)(nil).AddUser), user)
}

// GetUser mocks base method.
func (m *MockDatabaseUser) GetUser(email string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", email)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockDatabaseUserMockRecorder) GetUser(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDatabaseUser)(nil).GetUser), email)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: controller_interface.go

// Package mock_controller is a generated GoMock package.
package view

import (
	models "KatodForAnod/siteGallery/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserController is a mock of UserController interface.
type MockUserController struct {
	ctrl     *gomock.Controller
	recorder *MockUserControllerMockRecorder
}

// MockUserControllerMockRecorder is the mock recorder for MockUserController.
type MockUserControllerMockRecorder struct {
	mock *MockUserController
}

// NewMockUserController creates a new mock instance.
func NewMockUserController(ctrl *gomock.Controller) *MockUserController {
	mock := &MockUserController{ctrl: ctrl}
	mock.recorder = &MockUserControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserController) EXPECT() *MockUserControllerMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserController) CreateUser(user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserControllerMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserController)(nil).CreateUser), user)
}

// GetUser mocks base method.
func (m *MockUserController) GetUser(email string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", email)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserControllerMockRecorder) GetUser(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserController)(nil).GetUser), email)
}

// MockImageController is a mock of ImageController interface.
type MockImageController struct {
	ctrl     *gomock.Controller
	recorder *MockImageControllerMockRecorder
}

// MockImageControllerMockRecorder is the mock recorder for MockImageController.
type MockImageControllerMockRecorder struct {
	mock *MockImageController
}

// NewMockImageController creates a new mock instance.
func NewMockImageController(ctrl *gomock.Controller) *MockImageController {
	mock := &MockImageController{ctrl: ctrl}
	mock.recorder = &MockImageControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageController) EXPECT() *MockImageControllerMockRecorder {
	return m.recorder
}

// GetImages mocks base method.
func (m *MockImageController) GetImages(offset, limit int64) ([]models.ImgMetaData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImages", offset, limit)
	ret0, _ := ret[0].([]models.ImgMetaData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImages indicates an expected call of GetImages.
func (mr *MockImageControllerMockRecorder) GetImages(offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImages", reflect.TypeOf((*MockImageController)(nil).GetImages), offset, limit)
}

// LoadImage mocks base method.
func (m *MockImageController) LoadImage(data models.ImgMetaData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadImage", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadImage indicates an expected call of LoadImage.
func (mr *MockImageControllerMockRecorder) LoadImage(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadImage", reflect.TypeOf((*MockImageController)(nil).LoadImage), data)
}

// PrepareImagesPage mocks base method.
func (m *MockImageController) PrepareImagesPage(imagesArr []models.ImgMetaData, id int, urlBase string) (models.ImagesPageBody, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareImagesPage", imagesArr, id, urlBase)
	ret0, _ := ret[0].(models.ImagesPageBody)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareImagesPage indicates an expected call of PrepareImagesPage.
func (mr *MockImageControllerMockRecorder) PrepareImagesPage(imagesArr, id, urlBase interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareImagesPage", reflect.TypeOf((*MockImageController)(nil).PrepareImagesPage), imagesArr, id, urlBase)
}

// MockCommonController is a mock of CommonController interface.
type MockCommonController struct {
	ctrl     *gomock.Controller
	recorder *MockCommonControllerMockRecorder
}

// MockCommonControllerMockRecorder is the mock recorder for MockCommonController.
type MockCommonControllerMockRecorder struct {
	mock *MockCommonController
}

// NewMockCommonController creates a new mock instance.
func NewMockCommonController(ctrl *gomock.Controller) *MockCommonController {
	mock := &MockCommonController{ctrl: ctrl}
	mock.recorder = &MockCommonControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommonController) EXPECT() *MockCommonControllerMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockCommonController) CreateUser(user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockCommonControllerMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockCommonController)(nil).CreateUser), user)
}

// GetImages mocks base method.
func (m *MockCommonController) GetImages(offset, limit int64) ([]models.ImgMetaData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImages", offset, limit)
	ret0, _ := ret[0].([]models.ImgMetaData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImages indicates an expected call of GetImages.
func (mr *MockCommonControllerMockRecorder) GetImages(offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImages", reflect.TypeOf((*MockCommonController)(nil).GetImages), offset, limit)
}

// GetUser mocks base method.
func (m *MockCommonController) GetUser(email string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", email)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockCommonControllerMockRecorder) GetUser(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockCommonController)(nil).GetUser), email)
}

// LoadImage mocks base method.
func (m *MockCommonController) LoadImage(data models.ImgMetaData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadImage", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadImage indicates an expected call of LoadImage.
func (mr *MockCommonControllerMockRecorder) LoadImage(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadImage", reflect.TypeOf((*MockCommonController)(nil).LoadImage), data)
}

// PrepareImagesPage mocks base method.
func (m *MockCommonController) PrepareImagesPage(imagesArr []models.ImgMetaData, id int, urlBase string) (models.ImagesPageBody, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareImagesPage", imagesArr, id, urlBase)
	ret0, _ := ret[0].(models.ImagesPageBody)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareImagesPage indicates an expected call of PrepareImagesPage.
func (mr *MockCommonControllerMockRecorder) PrepareImagesPage(imagesArr, id, urlBase interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareImagesPage", reflect.TypeOf((*MockCommonController)(nil).PrepareImagesPage), imagesArr, id, urlBase)
}
